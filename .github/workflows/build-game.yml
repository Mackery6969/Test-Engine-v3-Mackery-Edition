name: Build Game

on:
  workflow_dispatch:
    inputs:
      build-defines:
        type: string
        description: Build defines to use
        default: "-DGITHUB_BUILD"
      save-artifact:
        type: boolean
        description: Save the build artifact to Github Actions
        default: true
  push:
    paths-ignore:
      - "**/Dockerfile"
      - ".github/workflows/build-docker-image.yml"

jobs:
  build-game-on-host:
    strategy:
      matrix:
        include:
          - target: windows-latest
          - target: macos-latest
    runs-on: ${{ matrix.target }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Make git happy
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Install Haxe on macOS
        if: ${{ matrix.target == 'macos-latest' }}
        run: |
          brew update
          brew install haxe
          echo "/opt/homebrew/bin" >> $GITHUB_PATH   # Add Haxe to PATH
          echo "HAXE_STD_PATH=/opt/homebrew/lib/haxe/std" >> $GITHUB_ENV  # Set HAXE_STD_PATH

      - name: Install Haxe on Windows
        if: ${{ matrix.target == 'windows-latest' }}
        run: |
          choco install haxe -y
          echo "C:/ProgramData/chocolatey/lib/haxe/tools/haxe" >> $GITHUB_PATH  # Add Haxe to PATH

      - name: Ensure haxelib uses local .haxelib folder
        run: |
          if command -v haxelib > /dev/null; then
            echo "$GITHUB_WORKSPACE/.haxelib" | haxelib setup
          else
            echo "Error: haxelib not found in PATH" && exit 1
          fi

      - name: Setup HXCPP dev commit
        run: |
          # Pre-build hxcpp if directory exists
          if [ -d "$GITHUB_WORKSPACE/.haxelib/hxcpp/git/tools/hxcpp" ]; then
            cd $GITHUB_WORKSPACE/.haxelib/hxcpp/git/tools/hxcpp
            haxe compile.hxml
            cd ../../../../..
          fi

      - name: Build game (Windows)
        if: ${{ matrix.target == 'windows-latest' }}
        run: haxelib run lime build windows -v -release "${{ github.event.inputs.build-defines }}"
        timeout-minutes: 120

      - name: Build game (Other targets)
        if: ${{ matrix.target != 'windows-latest' }}
        run: haxelib run lime build "${{ matrix.target }}" -v -release --times "${{ github.event.inputs.build-defines }}"
        timeout-minutes: 120

      - name: Save build artifact to Github Actions
        if: ${{ github.event.inputs.save-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: export/release/${{ matrix.target }}/bin/

  build-game-in-container:
    runs-on: ubuntu-latest
    container: ghcr.io/mackery6969/build-dependencies:latest
    strategy:
      matrix:
        include:
          - target: linux-latest
          - target: html5-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Ensure haxelib uses local .haxelib folder
        run: echo "$GITHUB_WORKSPACE/.haxelib" | haxelib setup

      - name: Build game
        run: haxelib run lime build "${{ matrix.target }}" -v -release --times "${{ github.event.inputs.build-defines }}"
        timeout-minutes: 120

      - name: Save build artifact to Github Actions
        if: ${{ github.event.inputs.save-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: export/release/${{ matrix.target }}/bin/
