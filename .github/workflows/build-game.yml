name: Build Game

on:
  workflow_dispatch:
    inputs:
      build-defines:
        type: string
        description: Build defines to use
        default: "-DGITHUB_BUILD"
      save-artifact:
        type: boolean
        description: Save the build artifact to Github Actions
        default: true
  push:
    paths-ignore:
      - "**/Dockerfile"
      - ".github/workflows/build-docker-image.yml"

jobs:
  build-game-on-host:
    strategy:
      matrix:
        include:
          - target: windows-latest
          - target: macos-latest
    runs-on: ${{ matrix.target }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Make git happy
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Install Haxe on macOS
        if: ${{ matrix.target == 'macos-latest' }}
        run: |
          brew update
          brew install haxe
          echo "::add-path::$(brew --prefix)/bin"  # Ensure haxe and haxelib are in PATH

      - name: Setup build environment
        env:
          HAXE_STD_PATH: /usr/local/lib/haxe/std  # Adjust for macOS if needed
          HXCPP_COMPILE_SKIP_PROMPT: "1"
        run: |
          # Ensure hxcpp is installed
          if ! haxelib list | grep -q 'hxcpp'; then
            haxelib install hxcpp
          fi

          # Pre-build hxcpp if directory exists
          if [ -d ".haxelib/hxcpp/git/tools/hxcpp" ]; then
            cd .haxelib/hxcpp/git/tools/hxcpp
            haxe compile.hxml
            cd ../../../../..
          fi

      - name: Build game (Windows)
        if: ${{ matrix.target == 'windows-latest' }}
        run: haxelib run lime build windows -v -release "${{ github.event.inputs.build-defines }}"
        timeout-minutes: 120

      - name: Build game (Other targets)
        if: ${{ matrix.target != 'windows-latest' }}
        run: haxelib run lime build "${{ matrix.target }}" -v -release --times "${{ github.event.inputs.build-defines }}"
        timeout-minutes: 120

      - name: Save build artifact to Github Actions
        if: ${{ github.event.inputs.save-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: export/release/${{ matrix.target }}/bin/

  build-game-in-container:
    runs-on: ubuntu-latest
    container: ghcr.io/mackery6969/build-dependencies:latest
    strategy:
      matrix:
        include:
          - target: linux-latest
          - target: html5-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Config haxelib
        env:
          HXCPP_COMPILE_SKIP_PROMPT: "1"
        run: |
          haxelib --never newrepo
          echo "HAXEPATH=$(haxelib config)" >> "$GITHUB_ENV"

          # Ensure hxcpp is installed
          if ! haxelib list | grep -q 'hxcpp'; then
            haxelib install hxcpp
          fi

          # Pre-build hxcpp if directory exists
          if [ -d ".haxelib/hxcpp/git/tools/hxcpp" ]; then
            cd .haxelib/hxcpp/git/tools/hxcpp
            haxe compile.hxml
            cd ../../../../..
          fi

      - name: Restore cached dependencies
        id: cache-hmm
        uses: actions/cache@v3
        with:
          path: .haxelib
          key: haxe-hmm-${{ runner.os }}-${{ hashFiles('**/hmm.json') }}
          restore-keys: |
            haxe-hmm-${{ runner.os }}-

      - name: Install dependencies if not cached
        if: ${{ steps.cache-hmm.outputs.cache-hit != 'true' }}
        run: |
          git config --global 'url.https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/.insteadOf' https://github.com/
          git config --global advice.detachedHead false
          haxelib --global run hmm install -q

      - name: Build game
        run: haxelib run lime build "${{ matrix.target }}" -v -release --times "${{ github.event.inputs.build-defines }}"
        timeout-minutes: 120

      - name: Save build artifact to Github Actions
        if: ${{ github.event.inputs.save-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: export/release/${{ matrix.target }}/bin/
